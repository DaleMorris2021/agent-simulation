@startuml

class Observer implements Runnable {
    - Agent[] agents
    - Obstacle[] obstacles
    - Goal goal
    + {static} void main()
    + void run()
}

class Agent {
    ' Location and velocity have x and y components
    - double[] location
    - double[] velocity
    ' Acceleration has left and right components
    - double[] acceleration
    - Sensor[] sensors
    - Physics physics

    + double[] getLocation()
    - void move()
    + double[] getVelocity()
    - void accelerate()
    + double[] getAcceleration()
    - void setAcceleration(double[] acceleration)
    ' sense() will set knownObstacles to the set of
    ' obstacles that are within sight of any sensor
    + Sensor[] getSensors()
    + void setSensors(Sensor[] sensors)
    + Obstacle[] getKnownObstacles()
    - void sense()
    + Physics getPhysics()
    + void setPhysics(Physics physics)
}

class Sensor {
    - double range
    - double angularWidth
    - double frequency
    
    + double getRange()
    + void setRange(double range)
    + double getAngularWidth()
    + void setAngularWidth(double angularWidth)
    + double getFrequency()
    + void setFrequency(double frequency)
}

class Obstacle {
    - Shape shape
    - double[] location

    + Shape getShape()
    + void setShape(Shape shape)
    + double[] getLocation()
    + void setLocation(double[] location)
}

class Goal {
    - Shape shape
    - double[] location

    + Shape getShape()
    + void setShape(Shape shape)
    + double[] getLocation()
    + void setLocation(double[] location)
}

class Physics {
    + double[] calculateAcceleration(Agent agent)
}

Observer --|{ Agent : has >
Observer --o{ Obstacle : has >

Agent --|{ Sensor : has >
Agent --> Obstacle : avoids
Agent --> Goal : moves toward
Agent --|{ Physics : obeys

@enduml
